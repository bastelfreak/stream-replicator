// Code generated by MockGen. DO NOT EDIT.
// Source: advisor.go

// Package advisor is a generated GoMock package.
package advisor

import (
	reflect "reflect"

	idtrack "github.com/choria-io/stream-replicator/idtrack"
	gomock "github.com/golang/mock/gomock"
)

// MockTracker is a mock of Tracker interface.
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker.
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance.
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// NotifyAgeWarning mocks base method.
func (m *MockTracker) NotifyAgeWarning(cb func(map[string]idtrack.Item)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAgeWarning", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyAgeWarning indicates an expected call of NotifyAgeWarning.
func (mr *MockTrackerMockRecorder) NotifyAgeWarning(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAgeWarning", reflect.TypeOf((*MockTracker)(nil).NotifyAgeWarning), cb)
}

// NotifyExpired mocks base method.
func (m *MockTracker) NotifyExpired(cb func(map[string]idtrack.Item)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyExpired", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyExpired indicates an expected call of NotifyExpired.
func (mr *MockTrackerMockRecorder) NotifyExpired(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyExpired", reflect.TypeOf((*MockTracker)(nil).NotifyExpired), cb)
}

// NotifyFirstSeen mocks base method.
func (m *MockTracker) NotifyFirstSeen(cb func(string, idtrack.Item)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyFirstSeen", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyFirstSeen indicates an expected call of NotifyFirstSeen.
func (mr *MockTrackerMockRecorder) NotifyFirstSeen(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyFirstSeen", reflect.TypeOf((*MockTracker)(nil).NotifyFirstSeen), cb)
}

// NotifyRecover mocks base method.
func (m *MockTracker) NotifyRecover(cb func(string, idtrack.Item)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRecover", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRecover indicates an expected call of NotifyRecover.
func (mr *MockTrackerMockRecorder) NotifyRecover(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecover", reflect.TypeOf((*MockTracker)(nil).NotifyRecover), cb)
}

// RecordAdvised mocks base method.
func (m *MockTracker) RecordAdvised(v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAdvised", v)
}

// RecordAdvised indicates an expected call of RecordAdvised.
func (mr *MockTrackerMockRecorder) RecordAdvised(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAdvised", reflect.TypeOf((*MockTracker)(nil).RecordAdvised), v)
}
